import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime
from datetime import datetime
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import declarative_base

API_TOKEN  = 'API_TOKEN'
DB_URL = "postgresql://user:password@db:5432/dbname"

Base = declarative_base()

class ProductInfo(Base):
    __tablename__ = 'product_info'

    id = Column(Integer, primary_key=True)
    user_id = Column(String)
    request_time = Column(DateTime, default=datetime.now)
    title = Column(String)
    article = Column(String)
    price = Column(Float)
    rating = Column(Float)
    quantity = Column(Integer)

engine = create_engine(DB_URL)
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
loop = asyncio.get_event_loop()

subscriptions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫

async def send_message(article, chat_id, user_id):
    url = f"https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={article}"
    response = requests.get(url)
    data = response.json()

    product = data['data']['products'][0]

    name = product.get('name', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    product_id = product.get('id', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    price = product.get('priceU', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    rating = product.get('rating', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    sizes = product.get('sizes', [])
    qty = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    if sizes and sizes[0]['stocks']:
        qty = sizes[0]['stocks'][0].get('qty', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

    message = f"üõçÔ∏è {name}\n\nüîñ –ê—Ä—Ç–∏–∫—É–ª: {product_id}\n\nüí∏ –¶–µ–Ω–∞: {price}\n\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {qty}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! üôå"

    try:
        await bot.send_message(chat_id, message, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe_{article}")]
        ]))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session = Session()
        new_product = ProductInfo(user_id=user_id, request_time=datetime.now(), title=name, article=product_id, price=price, rating=rating, quantity=qty)
        session.add(new_product)
        session.commit()
        session.close()

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µüòî: {e}")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É"))
    keyboard.add(types.KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
    keyboard.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É")
async def get_product_info(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ —Å Wildberries:")
    dp.register_message_handler(get_product_article, content_types=types.ContentType.TEXT)


async def get_product_article(message: types.Message):
    article = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id
    await send_message(article, chat_id, user_id)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('subscribe_'))
async def subscribe(callback_query: types.CallbackQuery):
    article = callback_query.data.split('_')[1]
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    subscriptions[chat_id] = article
    await callback_query.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
    loop.create_task(send_periodic_updates(article, chat_id, user_id))


async def send_periodic_updates(article, chat_id, user_id):
    while chat_id in subscriptions and subscriptions[chat_id] == article:
        await send_message(article, chat_id, user_id)
        await asyncio.sleep(300)  # 5 minutes


@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def stop_notifications(message: types.Message):
    chat_id = message.chat.id
    if chat_id in subscriptions:
        del subscriptions[chat_id]
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î")
async def get_info_from_db(message: types.Message):
    session = Session()
    products = session.query(ProductInfo).order_by(ProductInfo.id.desc()).limit(5).all()
    info = "\n\n".join([f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.title}\n–ê—Ä—Ç–∏–∫—É–ª: {product.article}\n–¶–µ–Ω–∞: {product.price}\n–†–µ–π—Ç–∏–Ω–≥: {product.rating}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}" for product in products])
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î:\n\n" + info)


if __name__ == '__main__':
    dp.middleware.setup(LoggingMiddleware())
    loop.run_until_complete(dp.start_polling())